import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import webAppManager from '../services/webAppManager';
import NotificationModal from '../components/NotificationModal';
import { useModal } from '../hooks/useModal';
import { useLazyLoad } from '../hooks/useLazyLoad';
import { useScrollRestoration } from '../hooks/useScrollRestoration';
import ProductCard from '../components/ProductCard';

/**
 * –≠–∫—Ä–∞–Ω –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –∫–µ—à–±–µ–∫–æ–º –∏ —Ç–æ–≤–∞—Ä–∞–º–∏
 */
const CatalogScreen = ({ user, items, loading, onLoadItems, onRefresh, cacheValid }) => {
    const navigate = useNavigate();
    const notificationModal = useModal();
    
    const [notification, setNotification] = useState({ icon: '‚úÖ', title: '', message: '' });
    const [isRefreshing, setIsRefreshing] = useState(false);
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ —Å–∫—Ä–æ–ª–ª–∞
    const { scrollRef, isRestoring } = useScrollRestoration('catalog-scroll', [items.length]);
    
    // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const { displayedItems, hasMore, loadMoreRef, totalCount } = useLazyLoad(items, 6, 6, 'catalog-lazy-load');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        // –í—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ–º onLoadItems - –≤–Ω—É—Ç—Ä–∏ –æ–Ω–∞ —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–µ—à
        onLoadItems();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []); // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

    // –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
    const handleRefresh = async () => {
        setIsRefreshing(true);
        webAppManager.hapticImpact();
        try {
            await onRefresh();
            showNotification('‚úÖ', '–û–±–Ω–æ–≤–ª–µ–Ω–æ', '–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω');
        } catch (error) {
            showNotification('‚ùå', '–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥');
        } finally {
            setIsRefreshing(false);
        }
    };

    const handleCashbackClick = () => {
        webAppManager.hapticImpact();
        const userBalance = user?.user?.card_balance || 0;
        
        if (userBalance < 1000) {
            showNotification('‚ùå', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤', '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ—à–±–µ–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 1000 –±–∞–ª–ª–æ–≤');
        } else {
            navigate('/tasks/cashback');
        }
    };

    const showNotification = (icon, title, message) => {
        setNotification({ icon, title, message });
        notificationModal.open();
    };

    const handleBuyItem = (item) => {
        webAppManager.hapticImpact();
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É —Ç–æ–≤–∞—Ä–∞
        const userBalance = user?.user?.card_balance || 0;
        const itemPrice = parseInt(item.price.replace(/\s/g, ''));

        if (userBalance < itemPrice) {
            showNotification('‚ùå', '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤', '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞');
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            showNotification('üõçÔ∏è', '–ü–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞', `–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å "${item.title}" –∑–∞ ${item.price} ‚ÇΩ?`);
        }
    };

    return (
        <>
            <div 
                ref={scrollRef} 
                className="h-full overflow-y-scroll px-4 pb-8"
                style={{ 
                    opacity: isRestoring ? 0 : 1,
                    transition: isRestoring ? 'none' : 'opacity 0.15s ease-in'
                }}
            >
                <h1 className="text-3xl font-semibold mt-4 mb-4 font-unbounded uppercase">–ü–æ–ª—É—á–∏—Ç—å<br/>–∫–µ—à–±–µ–∫<br/>–∑–∞ –ø–æ–∫—É–ø–∫—É</h1>
                <p className="text-base font-light text-gray-600 mb-4">
                    –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –º–∞–≥–∞–∑–∏–Ω–µ-–ø–∞—Ä—Ç–Ω–µ—Ä–µ –∏ –æ–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –∫–µ—à–±–µ–∫
                </p>
                <button 
                    onClick={handleCashbackClick}
                    className="cashback-btn bg-black text-white px-8 py-4 rounded-lg w-full mb-8 hover:bg-gray-800 transition-colors"
                >
                    –ü–æ–ª—É—á–∏—Ç—å –∫–µ—à–±–µ–∫
                </button>

                <div className="flex items-center justify-between mb-4">
                    <h2 className="text-3xl font-semibold font-unbounded uppercase">–ö–∞—Ç–∞–ª–æ–≥</h2>
                    {/* <button
                        onClick={handleRefresh}
                        disabled={isRefreshing || loading}
                        className="flex items-center gap-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        title="–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥"
                    >
                        <svg 
                            className={`w-5 h-5 ${isRefreshing ? 'animate-spin' : ''}`} 
                            fill="none" 
                            stroke="currentColor" 
                            viewBox="0 0 24 24"
                        >
                            <path 
                                strokeLinecap="round" 
                                strokeLinejoin="round" 
                                strokeWidth="2" 
                                d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
                            />
                        </svg>
                        <span className="text-sm font-medium hidden sm:inline">
                            {isRefreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å'}
                        </span>
                    </button> */}
                </div>
                <p className="text-gray-600 mb-4">–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã, —á—Ç–æ–±—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–∫—É–ø–∫—É</p>
                
                {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–µ—à–∞ */}
                {/* {!loading && cacheValid && items.length > 0 && (
                    <div className="mb-4 text-xs text-gray-500 flex items-center gap-2">
                        <svg className="w-4 h-4 text-green-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7" />
                        </svg>
                        <span>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)</span>
                    </div>
                )} */}

                {loading ? (
                    <div className="flex items-center justify-center p-8">
                        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                        <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã...</span>
                    </div>
                ) : items.length === 0 ? (
                    <div className="p-8 text-center">
                        <div className="text-gray-500 mb-2">
                            <svg className="w-12 h-12 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M9 21h6"></path>
                            </svg>
                        </div>
                        <p className="text-gray-600 font-medium">–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                        <p className="text-sm text-gray-400 mt-2">–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ</p>
                    </div>
                ) : (
                    <>
                        <div className="grid gap-6">
                            {displayedItems.map((item) => (
                                <ProductCard 
                                    key={item.id} 
                                    item={item}
                                    onBuy={handleBuyItem}
                                />
                            ))}
                        </div>
                        
                        {/* –≠–ª–µ–º–µ–Ω—Ç-—Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ */}
                        {hasMore && (
                            <div 
                                ref={loadMoreRef}
                                className="flex items-center justify-center p-8"
                            >
                                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-gray-900"></div>
                                <span className="ml-3 text-gray-600">–ó–∞–≥—Ä—É–∂–∞–µ–º –µ—â—ë...</span>
                            </div>
                        )}

                        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ */}
                        {!hasMore && totalCount > 6 && (
                            <div className="text-center py-8 text-gray-500 text-sm">
                                <div className="inline-flex items-center gap-2 px-4 py-2 bg-gray-100 rounded-full">
                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 13l4 4L19 7"></path>
                                    </svg>
                                    <span>–í—Å–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã ({totalCount})</span>
                                </div>
                            </div>
                        )}
                    </>
                )}
            </div>

            <NotificationModal
                isOpen={notificationModal.isOpen}
                onClose={notificationModal.close}
                icon={notification.icon}
                title={notification.title}
                message={notification.message}
            />
        </>
    );
};

export default CatalogScreen;
